import torch
import torch.nn.functional as F
import math

def top_k_logits(logits, k):
  """Masks logits such that logits not in top-k are small."""
  if k == 0:
    return logits
  else:
    values, _ = torch.topk(logits, k=k)
    k_largest = torch.min(values)
    logits = torch.where(logits <= k_largest, torch.ones_like(logits, device=logits.device)*-1e9, logits)
    return logits
  
def top_p_logits(logits, p):
  """Masks logits using nucleus (top-p) sampling."""
  if p == 1:
    return logits
  else:
    logit_shape = logits.shape
    seq, dim = logit_shape[1], logit_shape[2]
    logits = logits.view(-1, dim)
    sort_indices = torch.argsort(logits, dim=-1, descending=True)
    probs = torch.gather(F.softmax(logits, dim=-1), dim=-1, index=sort_indices)
    cumprobs = torch.cumsum(probs, dim=-1)
    cumprobs = torch.cat((torch.zeros((cumprobs.shape[0], 1), device=logits.device), cumprobs[:, :-1]), dim=1)
    # The top 1 candidate always will not be masked.
    # This way ensures at least 1 indices will be selected.
    sort_mask = torch.greater(cumprobs, p).to(dtype=logits.dtype)
    top_p_mask = torch.zeros(logits.shape, device=logits.device).scatter_(-1, sort_indices, sort_mask) 
    logits -= top_p_mask * 1e9
    return logits.view(-1, seq, dim)
  
def sample_no_grad_trunc_normal(num_samples, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + torch.erf(x / math.sqrt(2.))) / 2.

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)
        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        num_samples = torch.tensor(num_samples).shape
        tensor = torch.distributions.uniform.Uniform(2 * l - 1, 2 * u - 1).sample(num_samples)
        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()
        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)
        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor